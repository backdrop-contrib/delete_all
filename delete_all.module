<?php
/**
 * @var DELETE_ALL_MAX_EXECUTION
 *
 * Total seconds to allow the delete script to run
 */
define('DELETE_ALL_MAX_EXECUTION', 600);


/**
 * @file
 * Delete all 1.x module
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_menu() {
  $items = array();

  $items['admin/content/delete_content'] = array(
    'title' => 'Bulk delete content',
    'description' => 'Bulk delete nodes and comments on this site. This is useful for development sites, or prior to launching the site. Otherwise it destroys all data on a site.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('delete_all_content'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/content/delete_content/confirm'] = array(
    'title' => 'Confirm deletion of content',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('delete_all_content_confirm'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/people/delete_users'] = array(
    'title' => 'Delete all user accounts',
    'description' => 'Delete all user accounts on this site. This is useful for development sites, or prior to launching the site. Otherwise it destroys all data on a site.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('delete_all_users'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );


  $items['admin/content/delete_users/confirm'] = array(
    'title' => 'Confirm deletion of users',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('delete_all_users_confirm'),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_content() {
  // count how many nodes we have of each type
  $result = db_query("SELECT type, COUNT(*) AS num FROM {node} GROUP BY type");
  $count = array();
  foreach ($result as $data) {
    $count[$data->type] = $data->num;
  }

  // Add the types to the form. If there are no eligible types to delete,
  // we don't need to render the form.
  $types = array();
  foreach (node_type_get_types() as $type => $info) {
    if (array_key_exists($type, $count)) {
      $types[$type] = $info->name . ' (' . $count[$type] . ')';
    }
  }
  asort($types);

  if (module_exists('taxonomy')) {
    // count how many taxonomy terms we have for each vocabulary
    $result = db_query("SELECT vocabulary, COUNT(*) AS num FROM {taxonomy_term_data} GROUP BY vocabulary");
    $taxocount = array();
    foreach ($result as $data) {
      $taxocount[$data->vocabulary] = $data->num;
    }
    // Add the taxonomy vocabularies to the form. If there are no eligible types to delete,
    // we don't need to render the form.
    $vocabularies = array();
    $vocabulary_list = taxonomy_vocabulary_load_multiple(FALSE);
    foreach ($vocabulary_list as $vocabulary) {
      $name = $vocabulary->machine_name;
      if (array_key_exists($name, $taxocount)) {
        $vocabularies[$name] = $vocabulary->name . ' (' . $taxocount[$name] . ')';
      }
    }
    asort($vocabularies);
  }
  backdrop_add_js(backdrop_get_path('module', 'delete_all') . '/delete_all.js');
  $form = array();

  if (empty($types)) {
    $empty_message = t('There are no content types with content available to delete. You must <a href="@node-add">create some content</a> in order to delete it.', array('@node-add' => url('node/add')));

    if (module_exists('devel')) {
      $empty_message .= ' ' . t('For testing purposes, you can generate content quickly at the <a href="@generate-content-page">generate content page</a>.', array('@generate-content-page' => url('admin/devel/generate', array('query' => array('destination' => 'admin/content/delete_content')))));
    }
    backdrop_set_message($empty_message, 'info');
  }
  if (empty($types) && empty($vocabularies)) {
    return $form;
  }

  if (!empty($types)) {
    $form['all'] = array(
      '#type' => 'checkbox',
      '#default_value' => 0,
      '#title' => t('Delete all content'),
      '#description' => t('Select to delete all content from all content types.'),
      '#attributes' => array('class' => array('delete-all')),
    );
    $form['reset'] = array(
      '#type' => 'checkbox',
      '#default_value' => FALSE,
      '#title' => t('Reset content ids'),
      '#description' => t('When deleting all content, you can also optionally reset content ids to start at 1 again.'),
      '#attributes' => array('class' => array('delete-reset')),
      '#states' => array(
        'visible' => array(
          ':input[name="all"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['type-fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content types'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      'types' => array(
        '#type' => 'checkboxes',
        '#options' => $types,
        '#description' => t('Select the types of content to delete.'),
      ),
      '#states' => array(
        'invisible' => array(
          ':input[name="all"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
  if (module_exists('taxonomy') && !empty($vocabularies)) {
    $form['taxonomy'] = array(
      '#type' => 'checkbox',
      '#default_value' => 0,
      '#title' => t('Delete all taxonomy terms'),
      '#description' => t('Select to delete all taxonomy terms.'),
      '#attributes' => array('class' => array('delete-all')),
    );
    $form['taxonomy-fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Taxonomy'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      'vocabularies' => array(
        '#type' => 'checkboxes',
        '#options' => $vocabularies,
        '#description' => t('Select the taxonomy vocabularies to delete terms from.'),
      ),
      '#states' => array(
        'invisible' => array(
          ':input[name="taxonomy"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#attributes' => array('class' => array('button-danger')),
    ),
  );
  $form['#action'] = url('admin/content/delete_content/confirm');
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_content_confirm() {
  $results = $_POST;

  $form = array();

  if (!(isset($results['all'])) || $results['all'] == '') {
    $results['all'] = FALSE;
  }

  if (!isset($results['reset']) ) {
    $results['reset'] = '';
  }

  $form['all'] = array(
    '#type' => 'hidden',
    '#value' => isset($results['all']) ? $results['all'] : '',
  );

  if ($results['all'] && !isset($results['types'])) {
    if (!empty($results['all']) ) {
      // Only carry reset value through if delete all nodes is set
      $form['reset'] = array(
        '#type' => 'hidden',
        '#value' => $results['reset'],
      );
      if (!$results['confirm']) {
        // Make sure we don't show this message twice.
        backdrop_set_message('<p>' . t('All content in all content types will be deleted. Be sure to have a backup of any important data!') . '</p>', 'warning', FALSE);
      }
    }
    if (!empty($results['reset']) ) {
      if (empty($results['all']) ) {
        backdrop_set_message('<p>' . t('Sorry, we can\'t reset the content ids because you are not deleting all content items.') . '</p>', 'error', FALSE);
      }
      else {
        $form['all_reset'] = array(
          '#markup' => '<p>' . t('Content ids, revision ids and comment counts will be reset.') . '</p>',
        );
      }
    }
  }

  if (isset($results['types']) && is_array($results['types'])) {
    foreach ($results['types'] as $key_type => $type) {
      $form['type_' . $key_type] = array(
        '#type' => 'hidden',
        '#value' => $type,
      );
      $info = node_type_get_types('type', $type);
      $info = $info[$type];
      backdrop_set_message('<p>' . t('All content of type %type will be deleted. Be sure to have a backup of any important data!', array('%type' => $info->name)) . '</p>', 'warning', FALSE);
    }
  }

  if (module_exists('taxonomy')) {
    $vocabulary_info = array();
    foreach (taxonomy_vocabulary_load_multiple(FALSE) as $vocabulary) {
      $vocabulary_info[$vocabulary->machine_name] = $vocabulary->name;
    }
    if (!(isset($results['taxonomy'])) || $results['taxonomy'] == '') {
      $results['taxonomy'] = FALSE;
    }
    $form['taxonomy'] = array(
      '#type' => 'hidden',
      '#value' => isset($results['taxonomy']) ? $results['taxonomy'] : '',
    );
  
    if ($results['taxonomy'] && !isset($results['vocabularies'])) {
      if (!$results['confirm']) {
        // Make sure we don't show this message twice.
        backdrop_set_message('<p>' . t('All taxonomy terms in all vocabularies will be deleted. Be sure to have a backup of any important data!') . '</p>', 'warning', FALSE);
      }
    }
    else if (isset($results['vocabularies']) ) {
      if (is_array($results['vocabularies'])) {
        foreach ($results['vocabularies'] as $key_vocabulary => $vocabulary) {
          $form['vocabulary_' . $key_vocabulary] = array(
            '#type' => 'hidden',
            '#value' => $vocabulary,
          );
          $info = $vocabulary_info[$vocabulary];
          backdrop_set_message('<p>' . t('All taxonomy terms of vocabulary %vocabulary will be deleted. Be sure to have a backup of any important data!', array('%vocabulary' => $info)) . '</p>', 'warning', FALSE);
        }
      }
    }
  }

  $keys = array_filter(array_keys($results), "_delete_all_type_keys");

  foreach ($keys as $key) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $results[$key],
    );
  }

  $vocabulary_keys = array_filter(array_keys($results), "_delete_all_vocabulary_keys");
  foreach ($vocabulary_keys as $vkey) {
    $form[$vkey] = array(
      '#type' => 'hidden',
      '#value' => $results[$vkey],
    );
  }

  return confirm_form($form, t('Are you sure you wish to delete content?'), 'admin/content/delete_content', NULL, t('Delete all content now'), t('Cancel delete of all content'));
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_content_confirm_submit($form, &$form_state) {
  $types = array();
  $vocabularies = array();
  $keys = array_filter(array_keys($form_state['values']), "_delete_all_type_keys");
  foreach ($keys as $key) {
    $types[] = $form_state['values'][$key];
  }
  if ($form_state['values']['taxonomy']) {
    $vocabulary_info = array();
    foreach (taxonomy_vocabulary_load_multiple(FALSE) as $vocabulary) {
      $vocabularies[$vocabulary->machine_name] = $vocabulary->machine_name;
    }
  }
  $vkeys = array_filter(array_keys($form_state['values']), "_delete_all_vocabulary_keys");
  foreach ($vkeys as $key) {
    $vocabularies[] = $form_state['values'][$key];
  }

  $count = _delete_all_normal($form_state['values']['all'], $types, $vocabularies);

  if (empty($types) && $form_state['values']['all']) {
    // Delete the URL aliases
    db_query("DELETE FROM {url_alias} WHERE source LIKE 'node/%%'");

    backdrop_set_message(t('All content, comments and URL aliases have been deleted. Number of content items deleted: !count.', array('!count' => check_plain($count['nodes']))));
  }
  else if (!empty($types) && $count['nodes']) {
    backdrop_set_message(t('Content and comments of type <strong>@type</strong> have been deleted. Number of content items deleted: !count.', array('!count' => check_plain($count['nodes']), '@type' => implode(', ', $types))));
  }
  if (empty($vocabularies) && $form_state['values']['taxonomy']) {
    // Delete the URL aliases
    db_query("DELETE FROM {url_alias} WHERE source LIKE 'taxonomy/term/%%'");

    backdrop_set_message(t('All terms and URL aliases have been deleted. Number of terms deleted: !count.', array('!count' => check_plain($count['terms']))));
  }
  else if (!empty($vocabularies) && $count['terms']) {
    backdrop_set_message(t('All taxonomy terms of vocabulary <strong>@vocab</strong> have been deleted. Number of terms deleted: !count.', array('!count' => check_plain($count['terms']), '@vocab' => implode(', ', $vocabularies))));
  }

  if ($form_state['values']['reset']) {
    db_query("ALTER TABLE node AUTO_INCREMENT=1");
    db_query("ALTER TABLE node_revision AUTO_INCREMENT=1");
    if (module_exists('comment')) {
      db_query("ALTER TABLE comment AUTO_INCREMENT=1");
      backdrop_set_message(t('All node, revision and comment counts have been reset.'));
    }
    else {
      backdrop_set_message(t('All node and revision counts have been reset.'));
    }
  }

  backdrop_goto('admin/content');
}

function _delete_all_normal($all, $types, $vocabularies) {
  $deleted = array(
    'nodes' => 0,
    'terms' => 0,
  );
  $result = FALSE;
  if (is_array($types) && !empty($types)) {
    foreach ($types as $type) {
      $result = db_query(
        'SELECT nid FROM {node} WHERE type = :type',
        array(':type' => $type)
      );
    }
  }
  else if ($all) {
    $result = db_query(
      'SELECT nid FROM {node}'
    );
  }
  if ($result) {
    foreach ($result as $data) {
      set_time_limit(30);
      node_delete($data->nid);
      $deleted['nodes']++;
    }
  }
  if (is_array($vocabularies) && !empty($vocabularies)) {
    $vocabulary_info = array();
    foreach (taxonomy_vocabulary_load_multiple(FALSE) as $vocabulary) {
      $vocabulary_info[$vocabulary->machine_name] = $vocabulary->machine_name;
    }
    foreach ($vocabularies as $vocabulary) {
      foreach (taxonomy_get_tree($vocabulary_info[$vocabulary]) as $term) {
        taxonomy_term_delete($term->tid);
        $deleted['terms']++;
      }
    }
  }
  return $deleted;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_users() {
  $form = array();
  // count how many users we have in each role
  $result = db_query("SELECT role, COUNT(*) AS num FROM {users_roles} WHERE uid <> 1 GROUP BY role");
  $count = array();
  foreach ($result as $data) {
    $count[$data->role] = $data->num;
  }
  $count['withrole'] = db_query("SELECT COUNT(uid) AS num FROM {users_roles} WHERE uid > 1 GROUP BY uid")->rowCount();
  $count['authenticated'] = db_query("SELECT COUNT(uid) AS num FROM {users} WHERE uid > 1 GROUP BY uid")->rowCount();
  $count['norole'] = $count['authenticated'] - $count['withrole'];

  // Add the roles to the form. If there are no eligible roles to delete,
  // we don't need to render the form.
  $used_roles = array();
  $roles = user_roles($members_only = TRUE, $permission = NULL, $full_objects = FALSE);
  foreach ($roles as $role => $info) {
    if (array_key_exists($role, $count)) {
      $used_roles[$role] = $info . ' (' . $count[$role] . ')';
    }
  }
  if ($count['norole'] > 0) {
    $used_roles['norole'] = 'Users without a role (' . $count['norole'] . ')';
  }
  asort($used_roles);

  $form['users'] = array(
    '#type' => 'checkbox',
    '#default_value' => 0,
    '#title' => t('Delete all user accounts'),
    '#description' => t('Select to delete all user accounts (except user 1). This is the same as the "authenticated" role.'),
    '#attributes' => array('class' => array('delete-all')),
  );
  $form['users-fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Accounts'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    'roles' => array(
      '#type' => 'checkboxes',
      '#options' => $used_roles,
      '#description' => t('Select the user roles to delete accounts from. Keep in mind that some users may have more than one role, and deleting users from one of their roles will delete them from all roles.'),
    ),
    '#states' => array(
      'invisible' => array(
        ':input[name="users"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#attributes' => array('class' => array('button-danger')),
    ),
  );
  $form['#action'] = url('admin/content/delete_users/confirm');
  return $form;
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_users_confirm() {
  $results = $_POST;

  $form = array();

  if (!(isset($results['users'])) || $results['users'] == '') {
    $results['users'] = FALSE;
  }

  if (!isset($results['reset']) ) {
    $results['reset'] = '';
  }

  $form['users'] = array(
    '#type' => 'hidden',
    '#value' => isset($results['users']) ? $results['users'] : '',
  );

  if ($results['users'] && !isset($results['roles']) && !$results['confirm']) {
    backdrop_set_message('<p>' . t('All users (except user 1) will be deleted. Be sure to have a backup of any important data!') . '</p>', 'warning', FALSE);
  }

  if (isset($results['roles']) && is_array($results['roles'])) {
    $roleinfo = user_roles($members_only = TRUE, $permission = NULL, $full_objects = FALSE);
    foreach ($results['roles'] as $key_role => $role) {
      $form['role_' . $key_role] = array(
        '#type' => 'hidden',
        '#value' => $role,
      );
      $info = $roleinfo[$role];
      backdrop_set_message('<p>' . t('All users with role %role will be deleted. Be sure to have a backup of any important data!', array('%role' => $info)) . '</p>', 'warning', FALSE);
    }
  }

  $keys = array_filter(array_keys($results), "_delete_all_role_keys");

  foreach ($keys as $key) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $results[$key],
    );
  }

  return confirm_form($form, t('Are you sure you wish to delete user accounts?'), 'admin/content/delete_users', NULL, t('Delete user accounts now'), t('Cancel delete of user accounts'));
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_users_confirm_submit($form, &$form_state) {
  ini_set('max_execution_time', DELETE_ALL_MAX_EXECUTION);
  $roles = array();
  $keys = array_filter(array_keys($form_state['values']), "_delete_all_role_keys");
  foreach ($keys as $key) {
    $roles[] = $form_state['values'][$key];
  }

  $count = delete_all_users_delete($roles);

  if (empty($roles) && $form_state['values']['users']) {
    backdrop_set_message(t('All user accounts have been deleted. Number of user accounts deleted: !count.', array('!count' => check_plain($count))));
  }
  else if (!empty($roles) && $count > 0) {
    backdrop_set_message(t('User accounts with the role <strong>@role</strong> have been deleted. Number of accounts deleted: !count.', array('!count' => check_plain($count), '@role' => implode(', ', $roles))));
  }

  backdrop_goto('admin/users');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function delete_all_users_delete($roles = NULL) {
  $count = 0;
  $delete_norole = 0;
  if (!$roles || $roles == 'authenticated' || (is_array($roles) && in_array('authenticated', $roles))) {
    $result = db_query('SELECT uid FROM {users} WHERE uid > 1');
    foreach ($result as $data) {
      user_delete($data->uid);
      $count++;
    }
    // Delete the URL aliases
    db_query("DELETE FROM {url_alias} WHERE source LIKE 'user/%%'");
  }
  else {
    if (is_array($roles)) {
      $result = array();
      foreach ($roles as $role) {
        if ($role != 'norole') {
          $result = array_merge($result, db_select('users_roles', 'ur')->fields('ur', array('uid'))->condition('role', $role, '=')->execute()->fetchCol('uid'));
        }
        else {
          $delete_norole = 1;
        }
      }
    }
    else if ($roles == 'norole') {
      $delete_norole = 1;
    }
    else {
      $result = db_select('users_roles', 'ur')->fields('ur', array('uid'))->condition('role', $roles, '=')->execute()->fetchCol('uid');
    }
    if ($delete_norole) {
      $users = entity_load_multiple('user', FALSE, $conditions = array(), $reset = FALSE);
      foreach ($users as $user) {
        // All users currently
        $result[$user->uid] = $user->uid;
      }
      $roles_result = db_select('users_roles', 'ur')->fields('ur', array('uid'))->execute()->fetchCol('uid');
      $result = array_diff($result, $roles_result);
    }
    foreach ($result as $data) {
      if ($data > 1) {
        user_delete($data);
        $count++;
      }
    }
    // @TODO Delete individual aliases
  }
  return $count;
}

/**
 * Private callback to determine if a variable starts with 'type_'.
 * @param $var
 *   The string to test against.
 * @return bool
 *  TRUE if $var begins with 'type_'
 */
function _delete_all_type_keys($var) {
  return (strpos($var, 'type_') === 0 ? TRUE : FALSE);
}

/**
 * Private callback to determine if a variable starts with 'role_'.
 * @param $var
 *   The string to test against.
 * @return bool
 *  TRUE if $var begins with 'type_'
 */
function _delete_all_role_keys($var) {
  return (strpos($var, 'role_') === 0 ? TRUE : FALSE);
}

/**
 * Private callback to determine if a variable starts with 'vocabulary_'.
 * @param $var
 *   The string to test against.
 * @return bool
 *  TRUE if $var begins with 'vocabulary_'
 */
function _delete_all_vocabulary_keys($var) {
  return (strpos($var, 'vocabulary_') === 0 ? TRUE : FALSE);
}
